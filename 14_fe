import java.util.Arrays;
import java.util.Vector;

public class Arays_que {

    public static void main(String[] args) {

  System.out.println(busyStudent(new int[] {1,2,3},new int[] {3,2,7},4));
		System.out.println(Arrays.toString(runningSumArray(new int[] {1,2,3,4})));
		System.out.println(Arrays.toString(findIntersectionBetweenArray(new int[]{1, 2, 3, 4, 5, 6},new int[] {2, 3, 4, 7, 8})));
		System.out.println("Second largest : "+findSecondLargest(new int[]{1, 2, 3, 4, 5, 6}));
    }

    public static int busyStudent(int[] startTime, int[] endTime, int queryTime) {
        int i=0;
        int count=0;
        while(i<startTime.length) {
            if(startTime[i]<=queryTime && endTime[i]>=queryTime) {
                count++;
            }
            i++;
        }
        return count;
    }


    private static int[] runningSumArray(int[] arr) {
        for(int i=1;i<arr.length;i++) {
            arr[i]+=arr[i-1];
        }
        return arr;
    }


    private static int findSecondLargest(int[] arr) {
        int largest=Integer.MIN_VALUE,second = Integer.MIN_VALUE;
        for(int val:arr)
        {
            largest = Math.max(largest, val);
        }
        for(int val:arr)
        {
            if (val != largest)
                second = Math.max(second, val);
        }
        return second;
    }

    private static int[] findIntersectionBetweenArray(int[] arr1, int[] arr2) {
        Vector<Integer> res=new Vector<>();
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int low1=0,low2=0;
        while(low1<arr1.length && low2<arr2.length) {
            if(arr1[low1]>arr2[low2]) {
                low2++;
            }else if(arr1[low1]<arr2[low2]){
                low1++;
            }else {
                res.add(arr1[low1]);
                low1++;low2++;
            }
        }
        return res.stream().mapToInt(Integer::intValue).toArray();
    }
}


